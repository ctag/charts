image:
  pullPolicy: IfNotPresent
  repository: standardnotes/server
  tag: latest@sha256:cbdc5e3e6d7212eeaec86898e6ba944b1678349262d3da7215a246d832471391
localstackImage:
  pullPolicy: IfNotPresent
  repository: localstack/localstack
  tag: 3.0.2@sha256:73698e485240939490134aadd7e429ac87ff068cd5ad09f5de8ccb76727c13e1
persistence:
  logs:
    enabled: true
    targetSelector:
      main:
        main:
          mountPath: /var/lib/server/logs
  uploads:
    enabled: true
    targetSelector:
      main:
        main:
          mountPath: /opt/server/packages/files/dist/uploads
  localstack-bootstrap:
    enabled: true
    type: configmap
    objectName: localstack-bootstrap-init
    defaultMode: "0777"
    targetSelector:
      localstack:
        localstack:
          mountPath: /etc/localstack/init/ready.d/localstack_bootstrap.sh
          subPath: localstack_bootstrap.sh
portal:
  open:
    enabled: false
securityContext:
  container:
    readOnlyRootFilesystem: false
    runAsGroup: 0
    runAsUser: 0
service:
  main:
    enabled: true
    ports:
      main:
        enabled: true
        port: 3000
        targetPort: 3000
      files:
        enabled: true
        port: 3125
        targetPort: 3104
  localstack:
    enabled: true
    targetSelector: localstack
    ports:
      app:
        enabled: true
        targetSelector: localstack
        port: 4566
        targetPort: 4566
workload:
  main:
    podSpec:
      containers:
        main:
          env:
            DB_HOST:
              secretKeyRef:
                expandObjectName: false
                name: '{{ printf "%s-%s" .Release.Name "mariadbcreds" }}'
                key: plainhost
            DB_PORT: 3306
            DB_USERNAME: std_notes_user
            DB_PASSWORD:
              secretKeyRef:
                expandObjectName: false
                name: '{{ printf "%s-%s" .Release.Name "mariadbcreds" }}'
                key: mariadb-password
            DB_DATABASE: standard_notes_db
            DB_TYPE: mysql
            REDIS_PORT: 6379
            REDIS_HOST:
              secretKeyRef:
                expandObjectName: false
                name: '{{ printf "%s-%s" .Release.Name "rediscreds" }}'
                key: plainhost
            CACHE_TYPE: redis
            AUTH_JWT_SECRET:
              secretKeyRef:
                name: standardnotes-secrets
                key: AUTH_JWT_SECRET
            AUTH_SERVER_ENCRYPTION_SERVER_KEY:
              secretKeyRef:
                name: standardnotes-secrets
                key: AUTH_SERVER_ENCRYPTION_SERVER_KEY
            VALET_TOKEN_SECRET:
              secretKeyRef:
                name: standardnotes-secrets
                key: VALET_TOKEN_SECRET
  localstack:
    enabled: true
    type: Deployment
    podSpec:
      containers:
        localstack:
          enabled: true
          primary: true
          imageSelector: localstackImage
          probes:
            liveness:
              enabled: false
            readiness:
              enabled: false
            startup:
              enabled: false
          env:
            SERVICES: "sns,sqs"
            HOSTNAME_EXTERNAL: localstack
            LS_LOG: warn
mariadb:
  enabled: true
  mariadbUsername: std_notes_user
  mariadbDatabase: standard_notes_db
redis:
  enabled: true
configmap:
  localstack-bootstrap-init:
    enabled: true
    data:
      localstack_bootstrap.sh: |-
        #!/usr/bin/env bash
        set -euo pipefail
        echo "configuring sns/sqs"
        echo "==================="
        LOCALSTACK_HOST=localhost
        AWS_REGION=us-east-1
        LOCALSTACK_DUMMY_ID=000000000000
        get_all_queues() {
          awslocal --endpoint-url=http://${LOCALSTACK_HOST}:4566 sqs list-queues
        }
        create_queue() {
          local QUEUE_NAME_TO_CREATE=$1
          awslocal --endpoint-url=http://${LOCALSTACK_HOST}:4566 sqs create-queue --queue-name ${QUEUE_NAME_TO_CREATE}
        }
        get_all_topics() {
          awslocal --endpoint-url=http://${LOCALSTACK_HOST}:4566 sns list-topics
        }
        create_topic() {
          local TOPIC_NAME_TO_CREATE=$1
          awslocal --endpoint-url=http://${LOCALSTACK_HOST}:4566 sns create-topic --name ${TOPIC_NAME_TO_CREATE}
        }
        link_queue_and_topic() {
          local TOPIC_ARN_TO_LINK=$1
          local QUEUE_ARN_TO_LINK=$2
          awslocal --endpoint-url=http://${LOCALSTACK_HOST}:4566 sns subscribe --topic-arn ${TOPIC_ARN_TO_LINK} --protocol sqs --notification-endpoint ${QUEUE_ARN_TO_LINK}
        }
        get_queue_arn_from_name() {
          local QUEUE_NAME=$1
          echo "arn:aws:sns:${AWS_REGION}:${LOCALSTACK_DUMMY_ID}:$QUEUE_NAME"
        }
        get_topic_arn_from_name() {
          local TOPIC_NAME=$1
          echo "arn:aws:sns:${AWS_REGION}:${LOCALSTACK_DUMMY_ID}:$TOPIC_NAME"
        }
        PAYMENTS_TOPIC_NAME="payments-local-topic"
        echo "creating topic $PAYMENTS_TOPIC_NAME"
        TOPIC_CREATED_RESULT=$(create_topic ${PAYMENTS_TOPIC_NAME})
        echo "created topic: $TOPIC_CREATED_RESULT"
        PAYMENTS_TOPIC_ARN=$(get_topic_arn_from_name $PAYMENTS_TOPIC_NAME)
        SYNCING_SERVER_TOPIC_NAME="syncing-server-local-topic"
        echo "creating topic $SYNCING_SERVER_TOPIC_NAME"
        TOPIC_CREATED_RESULT=$(create_topic ${SYNCING_SERVER_TOPIC_NAME})
        echo "created topic: $TOPIC_CREATED_RESULT"
        SYNCING_SERVER_TOPIC_ARN=$(get_topic_arn_from_name $SYNCING_SERVER_TOPIC_NAME)
        AUTH_TOPIC_NAME="auth-local-topic"
        echo "creating topic $AUTH_TOPIC_NAME"
        TOPIC_CREATED_RESULT=$(create_topic ${AUTH_TOPIC_NAME})
        echo "created topic: $TOPIC_CREATED_RESULT"
        AUTH_TOPIC_ARN=$(get_topic_arn_from_name $AUTH_TOPIC_NAME)
        FILES_TOPIC_NAME="files-local-topic"
        echo "creating topic $FILES_TOPIC_NAME"
        TOPIC_CREATED_RESULT=$(create_topic ${FILES_TOPIC_NAME})
        echo "created topic: $TOPIC_CREATED_RESULT"
        FILES_TOPIC_ARN=$(get_topic_arn_from_name $FILES_TOPIC_NAME)
        ANALYTICS_TOPIC_NAME="analytics-local-topic"
        echo "creating topic $ANALYTICS_TOPIC_NAME"
        TOPIC_CREATED_RESULT=$(create_topic ${ANALYTICS_TOPIC_NAME})
        echo "created topic: $TOPIC_CREATED_RESULT"
        ANALYTICS_TOPIC_ARN=$(get_topic_arn_from_name $ANALYTICS_TOPIC_NAME)
        REVISIONS_TOPIC_NAME="revisions-server-local-topic"
        echo "creating topic $REVISIONS_TOPIC_NAME"
        TOPIC_CREATED_RESULT=$(create_topic ${REVISIONS_TOPIC_NAME})
        echo "created topic: $TOPIC_CREATED_RESULT"
        REVISIONS_TOPIC_ARN=$(get_topic_arn_from_name $REVISIONS_TOPIC_NAME)
        SCHEDULER_TOPIC_NAME="scheduler-local-topic"
        echo "creating topic $SCHEDULER_TOPIC_NAME"
        TOPIC_CREATED_RESULT=$(create_topic ${SCHEDULER_TOPIC_NAME})
        echo "created topic: $TOPIC_CREATED_RESULT"
        SCHEDULER_TOPIC_ARN=$(get_topic_arn_from_name $SCHEDULER_TOPIC_NAME)
        QUEUE_NAME="analytics-local-queue"
        echo "creating queue $QUEUE_NAME"
        QUEUE_URL=$(create_queue ${QUEUE_NAME})
        echo "created queue: $QUEUE_URL"
        ANALYTICS_QUEUE_ARN=$(get_queue_arn_from_name $QUEUE_NAME)
        echo "linking topic $PAYMENTS_TOPIC_ARN to queue $ANALYTICS_QUEUE_ARN"
        LINKING_RESULT=$(link_queue_and_topic $PAYMENTS_TOPIC_ARN $ANALYTICS_QUEUE_ARN)
        echo "linking done:"
        echo "$LINKING_RESULT"
        QUEUE_NAME="auth-local-queue"
        echo "creating queue $QUEUE_NAME"
        QUEUE_URL=$(create_queue ${QUEUE_NAME})
        echo "created queue: $QUEUE_URL"
        AUTH_QUEUE_ARN=$(get_queue_arn_from_name $QUEUE_NAME)
        echo "linking topic $PAYMENTS_TOPIC_ARN to queue $AUTH_QUEUE_ARN"
        LINKING_RESULT=$(link_queue_and_topic $PAYMENTS_TOPIC_ARN $AUTH_QUEUE_ARN)
        echo "linking done:"
        echo "$LINKING_RESULT"
        echo "linking topic $AUTH_TOPIC_ARN to queue $AUTH_QUEUE_ARN"
        LINKING_RESULT=$(link_queue_and_topic $AUTH_TOPIC_ARN $AUTH_QUEUE_ARN)
        echo "linking done:"
        echo "$LINKING_RESULT"
        echo "linking topic $FILES_TOPIC_ARN to queue $AUTH_QUEUE_ARN"
        LINKING_RESULT=$(link_queue_and_topic $FILES_TOPIC_ARN $AUTH_QUEUE_ARN)
        echo "linking done:"
        echo "$LINKING_RESULT"
        echo "linking topic $REVISIONS_TOPIC_ARN to queue $AUTH_QUEUE_ARN"
        LINKING_RESULT=$(link_queue_and_topic $REVISIONS_TOPIC_ARN $AUTH_QUEUE_ARN)
        echo "linking done:"
        echo "$LINKING_RESULT"
        QUEUE_NAME="files-local-queue"
        echo "creating queue $QUEUE_NAME"
        QUEUE_URL=$(create_queue ${QUEUE_NAME})
        echo "created queue: $QUEUE_URL"
        FILES_QUEUE_ARN=$(get_queue_arn_from_name $QUEUE_NAME)
        echo "linking topic $AUTH_TOPIC_ARN to queue $FILES_QUEUE_ARN"
        LINKING_RESULT=$(link_queue_and_topic $AUTH_TOPIC_ARN $FILES_QUEUE_ARN)
        echo "linking done:"
        echo "$LINKING_RESULT"
        echo "linking topic $SYNCING_SERVER_TOPIC_ARN to queue $FILES_QUEUE_ARN"
        LINKING_RESULT=$(link_queue_and_topic $SYNCING_SERVER_TOPIC_ARN $FILES_QUEUE_ARN)
        echo "linking done:"
        echo "$LINKING_RESULT"
        QUEUE_NAME="syncing-server-local-queue"
        echo "creating queue $QUEUE_NAME"
        QUEUE_URL=$(create_queue ${QUEUE_NAME})
        echo "created queue: $QUEUE_URL"
        SYNCING_SERVER_QUEUE_ARN=$(get_queue_arn_from_name $QUEUE_NAME)
        echo "linking topic $SYNCING_SERVER_TOPIC_ARN to queue $SYNCING_SERVER_QUEUE_ARN"
        LINKING_RESULT=$(link_queue_and_topic $SYNCING_SERVER_TOPIC_ARN $SYNCING_SERVER_QUEUE_ARN)
        echo "linking done:"
        echo "$LINKING_RESULT"
        echo "linking topic $FILES_TOPIC_ARN to queue $SYNCING_SERVER_QUEUE_ARN"
        LINKING_RESULT=$(link_queue_and_topic $FILES_TOPIC_ARN $SYNCING_SERVER_QUEUE_ARN)
        echo "linking done:"
        echo "$LINKING_RESULT"
        echo "linking topic $SYNCING_SERVER_TOPIC_ARN to queue $AUTH_QUEUE_ARN"
        LINKING_RESULT=$(link_queue_and_topic $SYNCING_SERVER_TOPIC_ARN $AUTH_QUEUE_ARN)
        echo "linking done:"
        echo "$LINKING_RESULT"
        echo "linking topic $AUTH_TOPIC_ARN to queue $SYNCING_SERVER_QUEUE_ARN"
        LINKING_RESULT=$(link_queue_and_topic $AUTH_TOPIC_ARN $SYNCING_SERVER_QUEUE_ARN)
        echo "linking done:"
        echo "$LINKING_RESULT"
        QUEUE_NAME="revisions-server-local-queue"
        echo "creating queue $QUEUE_NAME"
        QUEUE_URL=$(create_queue ${QUEUE_NAME})
        echo "created queue: $QUEUE_URL"
        REVISIONS_QUEUE_ARN=$(get_queue_arn_from_name $QUEUE_NAME)
        echo "linking topic $SYNCING_SERVER_TOPIC_ARN to queue $REVISIONS_QUEUE_ARN"
        LINKING_RESULT=$(link_queue_and_topic $SYNCING_SERVER_TOPIC_ARN $REVISIONS_QUEUE_ARN)
        echo "linking done:"
        echo "$LINKING_RESULT"
        echo "linking topic $REVISIONS_TOPIC_ARN to queue $REVISIONS_QUEUE_ARN"
        LINKING_RESULT=$(link_queue_and_topic $REVISIONS_TOPIC_ARN $REVISIONS_QUEUE_ARN)
        echo "linking done:"
        echo "$LINKING_RESULT"
        QUEUE_NAME="scheduler-local-queue"
        echo "creating queue $QUEUE_NAME"
        QUEUE_URL=$(create_queue ${QUEUE_NAME})
        echo "created queue: $QUEUE_URL"
        SCHEDULER_QUEUE_ARN=$(get_queue_arn_from_name $QUEUE_NAME)
        echo "all topics are:"
        echo "$(get_all_topics)"
        echo "all queues are:"
        echo "$(get_all_queues)"
